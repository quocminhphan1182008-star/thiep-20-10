// 1. Ch·ª©c nƒÉng M·ªü/ƒê√≥ng Thi·ªáp
const cardModal = document.getElementById('card-modal');
const openBtn = document.getElementById('open-card-btn');
const nameInput = document.getElementById('name-input');
const recipientSpan = document.getElementById('recipient-name');

openBtn.onclick = function() {
    cardModal.style.display = "block";
    setTimeout(() => {
        cardModal.classList.add('open');
    }, 10); 
}

function closeCard() {
    cardModal.classList.remove('open');
    setTimeout(() => {
        cardModal.style.display = "none";
    }, 300); 
}

// 2. Ch·ª©c nƒÉng C√° nh√¢n h√≥a t√™n ng∆∞·ªùi nh·∫≠n
nameInput.oninput = function() {
    const newName = nameInput.value.trim();
    if (newName) {
        recipientSpan.textContent = newName;
    } else {
        recipientSpan.textContent = 'Ng∆∞·ªùi Ph·ª• N·ªØ Tuy·ªát V·ªùi';
    }
}

// 3. Ch·ª©c nƒÉng ƒê·ªìng h·ªì ƒê·∫øm ng∆∞·ª£c
function startCountdown() {
    const now = new Date();
    const targetDate = new Date(now.getFullYear(), 9, 20, 0, 0, 0); 
    
    if (now.getMonth() > 9 || (now.getMonth() === 9 && now.getDate() >= 20)) {
        targetDate.setFullYear(now.getFullYear() + 1);
    }
    
    const countdownElement = document.getElementById('countdown');

    const updateCountdown = setInterval(() => {
        const nowTime = new Date().getTime();
        const distance = targetDate.getTime() - nowTime;

        const d = Math.floor(distance / (1000 * 60 * 60 * 24));
        const h = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const m = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const s = Math.floor((distance % (1000 * 60)) / 1000);

        if (distance > 0) {
             countdownElement.innerHTML = `‚è≥ C√≤n ${d} ng√†y, ${h} gi·ªù, ${m} ph√∫t, ${s} gi√¢y`;
        } else {
            clearInterval(updateCountdown);
            countdownElement.innerHTML = "‚ú® CH√öC M·ª™NG 20/10! ‚ú®";
        }
    }, 1000);
}

// 4. Hi·ªáu ·ª©ng ·∫¢nh R∆°i (s·ª≠ d·ª•ng emoji üåπ)
function createFallItem() {
    const item = document.createElement('div');
    item.classList.add('fall-item');
    
    // ƒê·∫∑t n·ªôi dung hi·ªÉn th·ªã (V√≠ d·ª•: Emoji, b·∫°n c√≥ th·ªÉ thay b·∫±ng c√°c emoji kh√°c: üíñ, üéÅ, üåü)
    item.innerHTML = '‚ù§Ô∏è'; 
    
    // V·ªã tr√≠ ng·∫´u nhi√™n
    item.style.left = Math.random() * window.innerWidth + 'px';
    
    // K√≠ch th∆∞·ªõc ng·∫´u nhi√™n (d√πng font-size cho emoji)
    const size = Math.random() * 15 + 15; // 15px ƒë·∫øn 30px
    item.style.fontSize = size + 'px'; 

    // Th·ªùi gian r∆°i ng·∫´u nhi√™n
    item.style.animationDuration = Math.random() * 10 + 5 + 's'; 
    // ƒê·ªô tr·ªÖ ng·∫´u nhi√™n ƒë·ªÉ r∆°i li√™n t·ª•c
    item.style.animationDelay = Math.random() * 5 + 's'; 

    document.querySelector('.fall-items-container').appendChild(item);

    // X√≥a ph·∫ßn t·ª≠ sau khi r∆°i xong ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ v√† t·∫°o l·∫°i
    item.onanimationend = () => {
        item.remove();
        createFallItem(); 
    };
}

// Kh·ªüi t·∫°o nhi·ªÅu ph·∫ßn t·ª≠ r∆°i khi t·∫£i trang
function startFallEffect() {
    for (let i = 0; i < 50; i++) { // S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ r∆°i
        createFallItem();
    }
}

// B·∫Øt ƒë·∫ßu t·∫•t c·∫£ c√°c ch·ª©c nƒÉng khi trang t·∫£i xong
window.onload = function() {
    startCountdown();
    startFallEffect(); // Thay ƒë·ªïi ·ªü ƒë√¢y ƒë·ªÉ g·ªçi h√†m m·ªõi
}
